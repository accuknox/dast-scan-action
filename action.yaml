name: AccuKnox DAST
description: Run a DAST (baseline or full) scan using OWASP ZAP and upload report to AccuKnox CSPM.
inputs:
  target_url:
    description: "The URL of the web application to scan."
    required: true
  accuknox_token:
    description: "Token for authenticating with the AccuKnox CSPM panel."
    required: true
  accuknox_endpoint:
    description: "The URL of the AccuKnox CSPM panel to push the scan results to."
    required: true
  tenant_id:
    description: "The ID of the tenant associated with the CSPM dashboard."
    required: true
  label:
    description: "Label created in AccuKnox SaaS for associating the scan results."
    required: true
  severity_threshold:
    description: "Minimum severity level (High, Medium, Low, Informational) that fails the pipeline if present."
    required: true
  scan_type:
    description: "Type of scan to run: 'baseline' or 'full-scan'."
    required: true
    default: "full-scan"

runs:
  using: "composite"
  steps:
    - name: Prepare Output Directory
      run: mkdir -p /tmp/zap && chmod a+w /tmp/zap
      shell: bash

    - name: Create ZAP Config
      run: |
        cat > /tmp/zap/log4j.properties << 'EOF'
        log4j.rootLogger=INFO, stdout
        log4j.appender.stdout=org.apache.log4j.ConsoleAppender
        log4j.appender.stdout.Target=System.out
        log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
        log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%p] %c{1} - %m%n
        log4j.logger.org.apache.xerces=WARN
        log4j.logger.org.xml=WARN
        EOF

        if [ "${{ inputs.scan_type }}" == "baseline" ]; then
          cat > /tmp/zap/zap-automation.yaml << 'EOF'
        env:
          contexts:
            - name: target-context
              urls: ["${{ inputs.target_url }}"]
              includePaths: ["${{ inputs.target_url }}.*"]
          parameters: {failOnError: false, failOnWarning: false, progressToStdout: true}
        jobs:
          - type: spider
            parameters: {context: target-context, maxDuration: 1}
          - type: passiveScan-wait
            parameters: {maxDuration: 2}
          - type: report
            parameters: {template: traditional-json-plus, reportDir: /zap/wrk, reportFile: report.json}
        EOF
        else
          cat > /tmp/zap/zap-automation.yaml << 'EOF'
        env:
          contexts:
            - name: target-context
              urls: ["${{ inputs.target_url }}"]
              includePaths: ["${{ inputs.target_url }}.*"]
          parameters: {failOnError: false, failOnWarning: false, progressToStdout: true}
        jobs:
          - type: spider
            parameters: {context: target-context, maxDuration: 5}
          - type: activeScan
            parameters: {context: target-context, maxRuleDurationInMins: 10, maxScanDurationInMins: 15}
          - type: report
            parameters: {template: traditional-json-plus, reportDir: /zap/wrk, reportFile: report.json}
        EOF
        fi
      shell: bash

    - name: Run ZAP Scan
      run: |
        docker run --rm -v /tmp/zap:/zap/wrk -t zaproxy/zap-stable \
        zap.sh -cmd -autorun /zap/wrk/zap-automation.yaml \
        -configfile /zap/wrk/log4j.properties || true
      shell: bash

    - name: Verify Report
      run: if [ ! -f "/tmp/zap/report.json" ]; then echo "Report not found"; exit 1; fi
      shell: bash

    - name: Upload Report to AccuKnox
      run: |
        response=$(curl -s --location --request POST "https://${{ inputs.accuknox_endpoint }}/api/v1/artifact/?tenant_id=${{ inputs.tenant_id }}&data_type=ZAP&label_id=${{ inputs.label }}&save_to_s3=true" \
          --header "Tenant-Id: ${{ inputs.tenant_id }}" \
          --header "Authorization: Bearer ${{ inputs.accuknox_token }}" \
          --form "file=@/tmp/zap/report.json")
        [[ "$response" == *"File received successfully"* ]] || { echo "Upload failed"; exit 1; }
      shell: bash

    - name: Check Severity Threshold
      run: |
        case "${{ inputs.severity_threshold }}" in
          High) RISK=3 ;; Medium) RISK=2 ;; Low) RISK=1 ;; Informational) RISK=0 ;;
          *) echo "Invalid threshold"; exit 1 ;;
        esac
        if jq -e --argjson risk "$RISK" '.site[].alerts[] | select(.riskcode|tonumber >= $risk)' /tmp/zap/report.json >/dev/null; then
          echo "Vulnerabilities >= ${{ inputs.severity_threshold }} found."; exit 1
        fi
      shell: bash

branding:
  icon: "shield"
  color: "red"